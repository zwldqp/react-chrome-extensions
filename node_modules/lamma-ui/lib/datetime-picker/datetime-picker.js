'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('moment/locale/zh-cn');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Panel = require('rc-time-picker/lib/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _calendar = require('../calendar/calendar');

var _calendar2 = _interopRequireDefault(_calendar);

var _input = require('../input/input');

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author sunlei
 * 请在这里填写当组件 **DatetimePicker** 的描述信息，可以使用 **Markdown** 语法。
 */
var DatetimePicker = function (_React$Component) {
    _inherits(DatetimePicker, _React$Component);

    function DatetimePicker(props) {
        _classCallCheck(this, DatetimePicker);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            value: _this.props.value
        };
        return _this;
    }

    DatetimePicker.prototype.handleOnChange = function handleOnChange(m) {
        this.setState({
            value: m
        });
        this.props.onChange(m);
    };

    DatetimePicker.prototype.dateFormat = function dateFormat() {
        var calendarProps = this.props.calendarProps;

        if (calendarProps && calendarProps.format) {
            return calendarProps.format;
        }
        return 'YYYY-MM-DD';
    };

    DatetimePicker.prototype.timeFormat = function timeFormat() {
        var timePickerProps = this.props.timePickerProps;

        if (timePickerProps && timePickerProps.format) {
            return timePickerProps.format;
        }
        return 'HH:mm:ss';
    };

    DatetimePicker.prototype.inputValue = function inputValue() {
        var value = this.props.value !== undefined ? this.props.value : this.state.value;
        if (!value) return '';
        var _props = this.props,
            format = _props.format,
            calendarProps = _props.calendarProps,
            enableTimePicker = _props.enableTimePicker;

        var mode = calendarProps && calendarProps.mode;
        var realFormat = format;
        if (!realFormat) {
            if (mode === 'time' && enableTimePicker) {
                realFormat = this.timeFormat();
            } else if (enableTimePicker) {
                realFormat = this.dateFormat() + ' ' + this.timeFormat();
            } else {
                realFormat = this.dateFormat();
            }
        }
        return value.format(realFormat);
    };

    DatetimePicker.prototype.render = function render() {
        var _this2 = this;

        var _props2 = this.props,
            className = _props2.className,
            inputProps = _props2.inputProps,
            calendarProps = _props2.calendarProps,
            timePickerProps = _props2.timePickerProps,
            placement = _props2.placement,
            enableTimePicker = _props2.enableTimePicker,
            otherProps = _objectWithoutProperties(_props2, ['className', 'inputProps', 'calendarProps', 'timePickerProps', 'placement', 'enableTimePicker']);

        var timePicker = function timePicker() {
            return enableTimePicker && _react2.default.createElement(_Panel2.default, timePickerProps);
        };
        var calendar = _react2.default.createElement(_calendar2.default, _extends({
            locale: _calendar.zhCN,
            showDateInput: false,
            timePicker: timePicker() || undefined
        }, calendarProps));
        return _react2.default.createElement(
            _calendar.Picker,
            _extends({
                placement: placement,
                align: { offset: [0, 34] }
            }, otherProps, {
                calendar: calendar,
                onChange: function onChange(m) {
                    return _this2.handleOnChange(m);
                }
            }),
            function () {
                return _react2.default.createElement(_input2.default, _extends({
                    type: 'text',
                    value: _this2.inputValue(),
                    className: className,
                    placeholder: '\u8BF7\u9009\u62E9',
                    readOnly: true
                }, inputProps));
            }
        );
    };

    return DatetimePicker;
}(_react2.default.Component);

exports.default = DatetimePicker;


DatetimePicker.propTypes = {
    /**
     * 附加到 Input 上的 css class
     */
    className: _propTypes2.default.string,

    /**
     * 是否启用时间选择
     */
    enableTimePicker: _propTypes2.default.bool,

    /**
     * 显示到输入框中的日期格式，会覆盖掉 timePickerProps 或者 calendarProps 中的 format 字段
     */
    format: _propTypes2.default.string,

    /* eslint-disable react/require-default-props */
    /**
     * moment 或者 moment[]
     */
    value: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),

    /**
     * 日历组件属性，详见：http://react-component.github.io/calendar/#rc-calendar-props
     */
    calendarProps: _propTypes2.default.object,

    /**
     * 时间选组组件属性，详见：http://react-component.github.io/time-picker/#timepicker
     */
    timePickerProps: _propTypes2.default.object,

    /**
    * 输入框的属性，详见 Input 组件文档
    */
    inputProps: _propTypes2.default.object,

    onChange: _propTypes2.default.func,

    placement: _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight'])
};

DatetimePicker.defaultProps = {
    className: '',
    format: null,
    enableTimePicker: false,
    inputProps: {},
    calendarProps: {},
    placement: 'bottomLeft',
    onChange: function onChange(moments) {
        return moments;
    }
};