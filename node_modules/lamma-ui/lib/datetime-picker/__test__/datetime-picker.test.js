'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _datetimePicker = require('../datetime-picker');

var _datetimePicker2 = _interopRequireDefault(_datetimePicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Test <DatetimePicker/>', function () {
    it('should render without throwing an error', function () {
        var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_datetimePicker2.default, null));
        expect((0, _enzymeToJson2.default)(wrapper)).toMatchSnapshot();
    });

    it('default should work', function () {
        var onChange = jest.fn();
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_datetimePicker2.default, {
            onChange: onChange
        }));
        var m = (0, _moment2.default)();
        expect(wrapper.find('Picker').length).toBe(1);
        wrapper.find('Picker').prop('onChange')(m);
        expect(onChange).toBeCalled();
        expect(wrapper.find('input').prop('value')).toEqual(m.format('YYYY-MM-DD'));
    });

    it('enableTimePicker should work', function () {
        var onChange = jest.fn();
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_datetimePicker2.default, {
            onChange: onChange,
            enableTimePicker: true
        }));
        var m = (0, _moment2.default)();
        wrapper.find('Picker').prop('onChange')(m);
        expect(wrapper.find('input').prop('value')).toEqual(m.format('YYYY-MM-DD HH:mm:ss'));
        wrapper.setProps({ calendarProps: { format: 'YYYY' } });
        expect(wrapper.find('input').prop('value')).toEqual(m.format('YYYY HH:mm:ss'));

        wrapper.setProps({
            calendarProps: { mode: 'time' },
            timePickerProps: { format: 'HH' }
        });
        expect(wrapper.find('input').prop('value')).toEqual(m.format('HH'));
        wrapper.setProps({ format: 'YYYY-MM' });
        expect(wrapper.find('input').prop('value')).toEqual(m.format('YYYY-MM'));
    });
}); /* global describe, it, expect */