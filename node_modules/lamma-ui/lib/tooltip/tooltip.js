'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Tooltip;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcTooltip = require('rc-tooltip');

var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

var _placements = require('./placements');

var _placements2 = _interopRequireDefault(_placements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * @author [SunLei](http://git.4paradigm.com/u/sunlei)
 * 
 * 该组件基于 [rc-tooltip](http://react-component.github.io/tooltip/)
 */
function Tooltip(props) {
    var arrowPointAtCenter = props.arrowPointAtCenter,
        otherProps = _objectWithoutProperties(props, ['arrowPointAtCenter']);

    return _react2.default.createElement(
        _rcTooltip2.default,
        _extends({
            builtinPlacements: (0, _placements2.default)({ arrowPointAtCenter: arrowPointAtCenter })
        }, otherProps),
        props.children
    );
}

Tooltip.propTypes = {
    /**
     * Tooltip 的子组件，其相关事件会触发 Tooltip 的弹出
     */
    children: _propTypes2.default.element,

    /**
     * Tooltip 的箭头是否指向目标组件的中间位置
     */
    arrowPointAtCenter: _propTypes2.default.bool
};

Tooltip.defaultProps = {
    children: null,
    arrowPointAtCenter: false
};