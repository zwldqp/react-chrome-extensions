'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = getPlacements;

var _placements = require('rc-tooltip/lib/placements');

function resetOffset(offset) {
    var offsetX = offset[0];
    var offsetY = offset[1];
    if (Math.abs(offsetX) === 4) {
        offsetX = offsetX / Math.abs(offsetX) * 6;
    }
    if (Math.abs(offsetY) === 4) {
        offsetY = offsetY / Math.abs(offsetY) * 6;
    }
    return [offsetX, offsetY];
}

function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth,
        arrowWidth = _config$arrowWidth === undefined ? 6 : _config$arrowWidth,
        _config$horizontalArr = config.horizontalArrowShift,
        horizontalArrowShift = _config$horizontalArr === undefined ? 15 : _config$horizontalArr,
        _config$verticalArrow = config.verticalArrowShift,
        verticalArrowShift = _config$verticalArrow === undefined ? 5 : _config$verticalArrow;

    var targetOffset = [0, 0];
    var autoAdjustOverflow = {
        adjustX: 1,
        adjustY: 1
        // const autoAdjustOverflowDisabled = {
        //     adjustX: 0,
        //     adjustY: 0,
        // }
    };var placementMap = {
        left: {
            points: ['cr', 'cl'],
            offset: [-4, 0]
        },
        right: {
            points: ['cl', 'cr'],
            offset: [4, 0]
        },
        top: {
            points: ['bc', 'tc'],
            offset: [0, -12]
        },
        bottom: {
            points: ['tc', 'bc'],
            offset: [0, 4]
        },
        topLeft: {
            points: ['bl', 'tc'],
            offset: [-(horizontalArrowShift + arrowWidth), -4]
        },
        leftTop: {
            points: ['tr', 'cl'],
            offset: [-4, -(verticalArrowShift + arrowWidth)]
        },
        topRight: {
            points: ['br', 'tc'],
            offset: [horizontalArrowShift + arrowWidth, -4]
        },
        rightTop: {
            points: ['tl', 'cr'],
            offset: [4, -(verticalArrowShift + arrowWidth)]
        },
        bottomRight: {
            points: ['tr', 'bc'],
            offset: [horizontalArrowShift + arrowWidth, 4]
        },
        rightBottom: {
            points: ['bl', 'cr'],
            offset: [4, verticalArrowShift + arrowWidth]
        },
        bottomLeft: {
            points: ['tl', 'bc'],
            offset: [-(horizontalArrowShift + arrowWidth), 4]
        },
        leftBottom: {
            points: ['br', 'cl'],
            offset: [-4, verticalArrowShift + arrowWidth]
        }
    };
    Object.keys(placementMap).forEach(function (key) {
        placementMap[key] = config.arrowPointAtCenter ? _extends({}, placementMap[key], {
            offset: resetOffset(placementMap[key].offset),
            targetOffset: targetOffset,
            autoAdjustOverflow: autoAdjustOverflow
        }) : _extends({}, _placements.placements[key], {
            offset: resetOffset(_placements.placements[key].offset)
        });
    });
    return placementMap;
}