'use strict';

exports.__esModule = true;
exports.default = Text;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toString(anyThing) {
    if (typeof anyThing.toString === 'function') {
        return anyThing.toString();
    }
    return Object.prototype.toString.call(anyThing);
}

/**
 * @author sunlei
 * 
 * 文本组件，可以通过指定 width 组件来实现超长 ... 隐藏的样式。
 */
function Text(props) {
    var _classNames;

    var isPositiveWidth = isFinite(props.width) && props.width > 0;
    var className = (0, _classnames2.default)((_classNames = {}, _classNames[props.className] = true, _classNames['rc-text'] = true, _classNames['rc-text-overfloy-hidden'] = isPositiveWidth, _classNames));
    var content = toString(props.children);
    return _react2.default.createElement(
        'span',
        {
            className: className,
            style: { width: props.width },
            title: isPositiveWidth ? content : undefined
        },
        content
    );
}

Text.propTypes = {

    /**
     * root css class
     */
    className: _propTypes2.default.string,

    /**
     * 文本最大允许展示的长度，超过长度会展示 ...
     */
    width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

    /**
     * 要展示的文字，会调用其 toString，如果没有 toString 则调用 Object.prototype.toString(xxx)
     */
    children: _propTypes2.default.any
};

Text.defaultProps = {
    className: '',
    children: '',
    width: 'auto'
};