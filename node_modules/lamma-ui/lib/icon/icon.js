'use strict';

exports.__esModule = true;
exports.default = Icon;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 *  @author sunyue
 *
 *  Icon组件地址 [http://iconfont.cn/](http://iconfont.cn/)。
 *
 *  使用 Iconfont 预览需要加入到项目，可以联系我～
 *
 *  使用方式：
 *
 *  1. 新增 Icon 后，将项目 Font Class 打包下载至本地
 *
 *  2. 替换 icon/iconfont 目录下的字体文件
 *
 *  `iconfont.eot, iconfont.svg, iconfont.ttf, iconfont.woff`
 *
 *  3. 在 icon/icon.less 文件后新增所添加 icon 的 uncoide 编码 // Font Class包中的 iconfont.css 文件
 *
 *  `.icon-right:before { content: "\e673"; }`
 *
 *  4. 在下面示例中展示新增组件需将新增组件 name添加到 demo/iconfont.jsx 的 iconfont数组中，即可完成新增组件展示
 *
 *  5. 重新编译 lamma-ui
 *
 *  6. 引用方式参照 demo
 */
function Icon(props) {
    var type = props.type;

    var style = props.className ? props.className : '';
    var className = 'icon iconfont icon-' + type + ' ' + style;

    return _react2.default.createElement('i', { className: className });
}

Icon.propTypes = {
    /**
    * Icon 的类型，具体可参考下方列表。
    */
    type: _propTypes2.default.string.isRequired,
    /**
    * Icon 的样式(可定义font-size, color等)
    */
    className: _propTypes2.default.string
};

Icon.defaultProps = {
    type: '',
    className: ''
};