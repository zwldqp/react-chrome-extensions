'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _input = require('../input/input');

var _input2 = _interopRequireDefault(_input);

var _icon = require('../icon/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author sundi
 *
 * searchbox，基于Input组件
 */

var SearchBox = function (_React$Component) {
    _inherits(SearchBox, _React$Component);

    function SearchBox() {
        _classCallCheck(this, SearchBox);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args)));

        _this.state = {
            value: '',
            showDeleteIcon: false
        };
        return _this;
    }

    SearchBox.prototype.onKeyDown = function onKeyDown(event) {
        // 回车
        if (event.keyCode === 13 && this.props.onSearch) {
            this.props.onSearch(event.target.value);
        }
    };

    SearchBox.prototype.onChange = function onChange(event) {
        var value = event.target.value;
        this.setState({
            value: value,
            showDeleteIcon: value !== ''
        });
    };

    SearchBox.prototype.searchContent = function searchContent() {
        if (this.props.onSearch) {
            this.props.onSearch(this.state.value);
        }
    };

    SearchBox.prototype.searchClear = function searchClear() {
        var _this2 = this;

        this.setState({
            value: '',
            showDeleteIcon: false
        }, function () {
            _this2.searchInput.input.focus();
            _this2.searchContent();
        });
    };

    SearchBox.prototype.render = function render() {
        var _this3 = this;

        var _props = this.props,
            className = _props.className,
            placeholder = _props.placeholder;

        var deleteClassName = (0, _classnames2.default)({
            'rc-searchbox-delete': true,
            'rc-searchbox-hide': !this.state.showDeleteIcon
        });
        var searchBoxClassName = {
            'rc-searchbox-wrap': true
        };
        if (className) {
            searchBoxClassName[className] = true;
        }

        return _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)(searchBoxClassName) },
            _react2.default.createElement(
                'div',
                { className: 'rc-searchbox-input-container' },
                _react2.default.createElement(_input2.default, {
                    type: 'text',
                    name: 'searchInput',
                    placeholder: placeholder || '搜索',
                    value: this.state.value,
                    ref: function ref(input) {
                        _this3.searchInput = input;
                    },
                    className: 'rc-searchbox-input-wrap',
                    inputClassName: 'rc-searchbox-input',
                    onChange: function onChange(event) {
                        _this3.onChange(event);
                    },
                    onKeyDown: function onKeyDown(event) {
                        _this3.onKeyDown(event);
                    }
                }),
                _react2.default.createElement(
                    'span',
                    {
                        role: 'button',
                        tabIndex: 0,
                        className: deleteClassName,
                        onClick: function onClick(event) {
                            _this3.searchClear(event);
                        }
                    },
                    _react2.default.createElement(_icon2.default, {
                        type: 'remove',
                        className: 'rc-searchbox-idelete'
                    })
                )
            ),
            _react2.default.createElement(
                'div',
                {
                    className: 'rc-searchbox-icon-wrap',
                    role: 'searchbox',
                    tabIndex: 0,
                    onClick: function onClick() {
                        _this3.searchContent();
                    }
                },
                _react2.default.createElement(_icon2.default, { type: 'search', className: 'rc-searchbox-isearch' })
            )
        );
    };

    return SearchBox;
}(_react2.default.Component);

exports.default = SearchBox;


SearchBox.propTypes = {
    /**
     * root className
     * 默认值, width: 205;height: 32px;
     * 设置width:100% 可自适应填充父元素
     */
    className: _propTypes2.default.string,
    /**
     * 搜索框内的文案
     */
    placeholder: _propTypes2.default.string,
    /**
     * 点击搜索按钮或者回车之后的回调函数
     * 点击搜索icon或者回车操作的时候获取搜索框内的输入值
     */
    onSearch: _propTypes2.default.func
};

SearchBox.defaultProps = {
    className: '',
    placeholder: '',
    onSearch: function onSearch() {}
};