'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _table = require('../table');

var _table2 = _interopRequireDefault(_table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global describe, it, expect, jest */
var columns = [{
    title: 'Name', dataIndex: 'name', key: 'name', width: 100
}, {
    title: 'Age', dataIndex: 'age', key: 'age', width: 100
}, {
    title: 'Address', key: 'address', render: function render(item) {
        return _react2.default.createElement(
            'div',
            { className: 'addr-wrap', title: item.address },
            item.address
        );
    }, width: 217
}, {
    title: 'Apeartions', key: 'operations', render: function render() {
        return _react2.default.createElement(
            'a',
            { href: '#' },
            'Delete'
        );
    }
}];

var data = [{ name: 'Jack', age: 28, address: 'some wheresome wheresome wheresome wheresome wheresome wheresome wheresome wheresome wheresome wheresome wheresome wheresome where', id: function id() {
        return '1';
    } }, { name: 'Rose', age: 36, address: 'some where', id: '2' }];

describe('Test <Table/> component basic render', function () {
    it('should render without throwing an error', function () {
        var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_table2.default, null));
        expect((0, _enzymeToJson2.default)(wrapper)).toMatchSnapshot();
    });

    it('should work with default selctions', function () {
        var onChange = jest.fn();
        var defaultSelections = [{ name: 'Rose', age: 36, address: 'some where', id: '2' }];
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_table2.default, {
            data: data,
            columns: columns,
            defaultSelections: defaultSelections
        }));
        expect(wrapper.find('input').length).toBe(0);
        wrapper.setProps({
            selectable: true,
            onChange: onChange,
            data: data,
            columns: columns
        });
        expect(wrapper.find('input').length).toBe(3);
        expect(wrapper.find('input').filter({ checked: true }).length).toBe(1);
        wrapper.find('input').at(0).simulate('change', { target: { checked: true } });
        expect(wrapper.find('input').filter({ checked: true }).length).toBe(3);
        expect(onChange).toBeCalledWith(data);
        expect(Object.keys(wrapper.state('selectionMap'))).toEqual(['1', '2']);
        wrapper.setProps({ data: [data[0]] }, function () {
            expect(Object.keys(wrapper.state('selectionMap'))).toEqual(['1']);
        });
    });

    it('should work with controlled selctions', function () {
        var selections = [{ name: 'Rose', age: 36, address: 'some where', id: '2' }];
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_table2.default, {
            data: data,
            columns: columns
        }));
        expect(wrapper.find('input').length).toBe(0);
        wrapper.setProps({
            selectable: true,
            selections: selections,
            data: data,
            columns: columns
        });
        expect(wrapper.find('input').length).toBe(3);
        expect(wrapper.find('input').filter({ checked: true }).length).toBe(1);
        wrapper.find('input').at(0).simulate('change', { target: { checked: true } });
        expect(wrapper.find('input').filter({ checked: true }).length).toBe(1);
    });
});