'use strict';

exports.__esModule = true;
exports.ColumnGroup = exports.Column = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _rcTable = require('rc-table');

Object.defineProperty(exports, 'Column', {
    enumerable: true,
    get: function get() {
        return _rcTable.Column;
    }
});
Object.defineProperty(exports, 'ColumnGroup', {
    enumerable: true,
    get: function get() {
        return _rcTable.ColumnGroup;
    }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcTable2 = _interopRequireDefault(_rcTable);

var _icon = require('../icon/icon');

var _icon2 = _interopRequireDefault(_icon);

var _dropdown = require('../dropdown/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _menu = require('../menu/menu');

var _menu2 = _interopRequireDefault(_menu);

var _checkbox = require('../checkbox/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author [SunLei](http://git.4paradigm.com/u/sunlei)
 * 
 * 该组件基于 [rc-table](http://react-component.github.io/table/)
 * 
 * - Table 默认 table-layout 为：fixed
 * - 如果希望某列超长的列内容隐藏为 ...，可以在列配置里设置 `fullTextTip: true`
 */
var Table = function (_React$Component) {
    _inherits(Table, _React$Component);

    Table.selectionsMapToArray = function selectionsMapToArray(selectionMap) {
        return Object.keys(selectionMap).map(function (key) {
            return selectionMap[key];
        });
    };

    Table.getColRender = function getColRender(col) {
        if (col.render) return col.render;
        if (col.fullTextTip) {
            return function (value) {
                return _react2.default.createElement(
                    'div',
                    { className: 'rc-table-col-wrapper', title: value },
                    value
                );
            };
        }
        return null;
    };

    Table.sortKey = function sortKey(col) {
        var key = col.dataIndex;
        if (typeof col.sort === 'string') {
            key = col.sort;
        }
        return key;
    };

    function Table(props) {
        _classCallCheck(this, Table);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            selectionMap: _this.selectionsMapFromArray(_this.props.defaultSelections),
            sortInfo: {},
            filterInfo: {}
        };
        return _this;
    }

    Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        var selectionMap = _extends({}, this.state.selectionMap);
        var nextData = nextProps.data;
        var keys = Object.keys(selectionMap);
        if (keys.length === 0) return;
        if (nextData.length === 0) {
            this.setState({ selectionMap: {} });
            return;
        }
        var rowKeys = nextData.map(function (item) {
            return _this2.rowKey(item);
        });
        keys.forEach(function (key) {
            if (rowKeys.indexOf(key) === -1) {
                delete selectionMap[key];
            }
        });
        this.setState({
            selectionMap: selectionMap
        });
    };

    Table.prototype.getSelectionMap = function getSelectionMap() {
        var selections = this.props.selections;

        if (selections) {
            return this.selectionsMapFromArray(selections);
        }
        return _extends({}, this.state.selectionMap);
    };

    Table.prototype.selectionsMapFromArray = function selectionsMapFromArray(selections) {
        var _this3 = this;

        if (!Array.isArray(selections)) return [];
        var ret = {};
        selections.forEach(function (i) {
            var key = _this3.rowKey(i);
            if (key) {
                ret[key] = i;
            }
        });
        return ret;
    };

    Table.prototype.rowKey = function rowKey(item) {
        var rowKey = this.props.rowKey;

        if (typeof rowKey === 'string') {
            return typeof item[rowKey] === 'function' ? item[rowKey]() : item[rowKey];
        }
        if (typeof rowKey === 'function') {
            return rowKey(item);
        }
        return null;
    };

    Table.prototype.handleCheckBoxChange = function handleCheckBoxChange(e, item) {
        var _this4 = this;

        var checked = e.target.checked;
        var key = this.rowKey(item);
        if (!key) {
            console.error('Please set rowKey prop correctly.');
            return;
        }
        var selectionMap = this.getSelectionMap();
        if (checked) {
            var _extends2;

            selectionMap = _extends({}, selectionMap, (_extends2 = {}, _extends2[key] = item, _extends2));
        } else if (selectionMap[key]) {
            delete selectionMap[key];
        }
        if (!this.props.selections) {
            this.setState({ selectionMap: selectionMap }, function () {
                _this4.props.onChange(Table.selectionsMapToArray(selectionMap));
            });
        } else {
            this.props.onChange(Table.selectionsMapToArray(selectionMap));
        }
    };

    Table.prototype.handleToggleSelectAll = function handleToggleSelectAll(e) {
        var _this5 = this;

        var checked = e.target.checked;
        var selectionMap = {};
        if (checked) {
            selectionMap = this.selectionsMapFromArray(this.props.data);
        }
        if (!this.props.selections) {
            this.setState({ selectionMap: selectionMap }, function () {
                _this5.props.onChange(checked ? _this5.props.data : []);
            });
        } else {
            this.props.onChange(checked ? this.props.data : []);
        }
    };

    Table.prototype.isChecked = function isChecked(item) {
        var key = this.rowKey(item);
        if (!key) return false;
        var selectionMap = this.getSelectionMap();
        return !!selectionMap[key];
    };

    Table.prototype.isAllChecked = function isAllChecked() {
        var selectionMap = this.getSelectionMap();
        var selectionKeysLength = Object.keys(selectionMap).length;
        return selectionKeysLength > 0 && selectionKeysLength === this.props.data.length;
    };

    Table.prototype.selectColumn = function selectColumn() {
        var _this6 = this;

        var selectColumnFixed = this.props.selectColumnFixed;

        return {
            title: _react2.default.createElement(_checkbox2.default, {
                checked: this.isAllChecked(),
                onChange: function onChange(e) {
                    return _this6.handleToggleSelectAll(e);
                }
            }),
            width: 50,
            dataIndex: '',
            key: 'select',
            fixed: selectColumnFixed,
            className: 'rc-table-select-col',
            render: function render(item) {
                return _react2.default.createElement(_checkbox2.default, {
                    checked: _this6.isChecked(item),
                    onChange: function onChange(e) {
                        return _this6.handleCheckBoxChange(e, item);
                    }
                });
            }
        };
    };

    Table.prototype.nextOrder = function nextOrder(nextSortKey) {
        var _state$sortInfo = this.state.sortInfo,
            field = _state$sortInfo.field,
            order = _state$sortInfo.order;

        if (field !== nextSortKey) return 'asc';
        if (order === 'asc') return 'desc';
        if (order === 'desc') return '';
        return 'asc';
    };

    Table.prototype.handleSort = function handleSort(col) {
        var _this7 = this;

        var sortKey = Table.sortKey(col);
        if (!sortKey) {
            console.error('A valid string "sort" filed or "dataIndex" is required.');
            return;
        }
        var nextOrder = this.nextOrder(sortKey);
        var nextSortInfo = !nextOrder ? {} : {
            field: sortKey,
            order: nextOrder
        };
        this.setState({ sortInfo: nextSortInfo }, function () {
            _this7.props.onSort(nextSortInfo);
        });
    };

    Table.prototype.handleFilter = function handleFilter(filterKey, selectedValue) {
        var _extends3,
            _this8 = this;

        if (!filterKey) return;
        var nextFilterInfo = _extends({}, this.state.filterInfo, (_extends3 = {}, _extends3[filterKey] = selectedValue, _extends3));
        this.setState({ filterInfo: nextFilterInfo }, function () {
            _this8.props.onFilter(nextFilterInfo);
        });
    };

    Table.prototype.sorterIconType = function sorterIconType(col) {
        var sortKey = Table.sortKey(col);
        var sorterIconTypeMap = {
            asc: 'up',
            desc: 'down'
        };
        var _state$sortInfo2 = this.state.sortInfo,
            field = _state$sortInfo2.field,
            order = _state$sortInfo2.order;

        if (sortKey !== field || order === '') return 'order';
        return sorterIconTypeMap[order];
    };

    Table.prototype.wrapperTitle = function wrapperTitle(col) {
        if (col.filter) {
            return this.renderFilterColTitle(col);
        }
        if (col.sort) {
            return this.renderSortColTitle(col);
        }
        return col.title;
    };

    Table.prototype.processColumns = function processColumns(columns) {
        var _this9 = this;

        if (columns.length === 0) return undefined;
        var selectable = this.props.selectable;

        var ret = columns.map(function (col) {
            return _extends({}, col, {
                title: _this9.wrapperTitle(col),
                render: Table.getColRender(col)
            });
        });
        if (selectable) {
            ret = [this.selectColumn()].concat(ret);
        }
        return ret;
    };

    Table.prototype.rootClassName = function rootClassName(className) {
        var type = this.props.type;

        var ret = className;
        if (type === 'sharp') {
            ret = 'bordered ' + ret;
        }
        return ret;
    };

    Table.prototype.renderSortColTitle = function renderSortColTitle(col) {
        var _this10 = this;

        var sorterIconType = this.sorterIconType(col);
        return _react2.default.createElement(
            'div',
            {
                role: 'button',
                tabIndex: 0,
                className: 'rc-table-col-title',
                onClick: function onClick() {
                    return _this10.handleSort(col);
                }
            },
            typeof col.title === 'function' ? col.title() : col.title,
            _react2.default.createElement(_icon2.default, { type: sorterIconType, className: 'rc-table-sorter-icon' })
        );
    };

    Table.prototype.renderFilterColTitle = function renderFilterColTitle(col) {
        var _this11 = this;

        var menu = _react2.default.createElement(
            _menu2.default,
            {
                onSelect: function onSelect(info) {
                    return _this11.handleFilter(col.filter.filterKey, info.key);
                }
            },
            col.filter.menu.map(function (m) {
                return _react2.default.createElement(
                    _menu.MenuItem,
                    { key: m.key },
                    m.title || m.key
                );
            })
        );
        return _react2.default.createElement(
            _dropdown2.default,
            {
                overlay: menu,
                overlayClassName: 'rc-table-filter-dropdown',
                trigger: ['click']
            },
            _react2.default.createElement(
                'div',
                {
                    role: 'button',
                    tabIndex: 0,
                    className: 'rc-table-col-title',
                    onClick: function onClick() {
                        return _this11.handleSort(col);
                    }
                },
                typeof col.title === 'function' ? col.title() : col.title,
                _react2.default.createElement(_icon2.default, { type: 'arrow-down', className: 'rc-table-sorter-icon' })
            )
        );
    };

    Table.prototype.render = function render() {
        var _props = this.props,
            columns = _props.columns,
            className = _props.className,
            otherProps = _objectWithoutProperties(_props, ['columns', 'className']);

        var processedColumns = this.processColumns(columns);
        var rootClassName = this.rootClassName(className);
        return _react2.default.createElement(_rcTable2.default, _extends({
            className: rootClassName,
            columns: processedColumns
        }, otherProps));
    };

    return Table;
}(_react2.default.Component);

exports.default = Table;


Table.propTypes = {

    /**
     * 组件 class，透传给 rc-table
     */
    className: _propTypes2.default.string,

    /**
     * 表格的每一行是否可选择
     */
    selectable: _propTypes2.default.bool,

    /* eslint-disable react/require-default-props */
    /**
     * 指定选中的记录，使用该属性会使 table 变为 controlled 组件，所以通常需要配合 onChange 使用
     */
    selections: _propTypes2.default.arrayOf(_propTypes2.default.object),

    /**
     * 默认选中的记录
     */
    defaultSelections: _propTypes2.default.arrayOf(_propTypes2.default.object),

    /**
     * 要展示在表格中的数据记录
     */
    data: _propTypes2.default.arrayOf(_propTypes2.default.object),

    /**
     * 选择列是否固定
     */
    selectColumnFixed: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['left', 'right']), _propTypes2.default.bool]),

    /**
     * 表格列，透传给 rc-table
     */
    columns: _propTypes2.default.array,

    /**
     * 是否展示边框
     */
    type: _propTypes2.default.oneOf(['sharp', 'flat']),

    /**
     * 被选中的记录发生变化时触发，接收一个数组，包含所有被选中的记录。
     * 注意：正确使用选择功能必须正确配置 rowKey 属性，详情参考 rc-table 的文档。
     */
    onChange: _propTypes2.default.func,

    /**
     * 某一列触发排序时的回调函数
     */
    onSort: _propTypes2.default.func,

    /**
     * 某一列出发过滤是的回调函数
     */
    onFilter: _propTypes2.default.func,

    /**
     * 每一行的 React key，如果启用选择，该属性必须正确配置，默认为 'id'
     */
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
};

Table.defaultProps = {
    selectable: false,
    type: 'flat',
    columns: [],
    data: [],
    defaultSelections: [],
    className: '',
    selectColumnFixed: false,
    rowKey: 'id',
    onSort: function onSort(sorter) {
        return sorter;
    },
    onFilter: function onFilter(filter) {
        return filter;
    },
    onChange: function onChange(selection) {
        return selection;
    }
};