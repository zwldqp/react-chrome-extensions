'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _checkboxGroup = require('../checkbox-group');

var _checkboxGroup2 = _interopRequireDefault(_checkboxGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global describe, it, expect, jest */
describe('Test <CheckboxGroup/> component', function () {
    it('should render without throwing an error', function () {
        var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_checkboxGroup2.default, null));
        expect((0, _enzymeToJson2.default)(wrapper)).toMatchSnapshot();
    });

    it('CheckboxGroup should work', function () {
        var options = [{ text: 'Boy', value: 1 }, { text: 'Girl', value: 2 }];
        var onChange = jest.fn();
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_checkboxGroup2.default, {
            onChange: onChange,
            options: options
        }));
        expect(wrapper.find('.rc-checkbox-input').length).toEqual(2);
        wrapper.find('.rc-checkbox-input').at(0).simulate('change', { target: { checked: true } });
        expect(onChange).toBeCalledWith([1]);
        wrapper.find('.rc-checkbox-input').at(1).simulate('change', { target: { checked: true } });
        expect(onChange).toBeCalledWith([2, 1]);
        wrapper.find('.rc-checkbox-input').at(0).simulate('change', { target: { checked: false } });
        expect(onChange).toBeCalledWith([2]);
    });

    it('Controlled CheckboxGroup should work', function () {
        var options = [{ text: 'Boy', value: 1 }, { text: 'Girl', value: 2 }];
        var onChange = jest.fn();
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_checkboxGroup2.default, {
            onChange: onChange,
            options: options,
            value: [1]
        }));
        expect(wrapper.find('.rc-checkbox-input').at(0).props().checked).toBe(true);
        wrapper.find('.rc-checkbox-input').at(1).simulate('change', { target: { checked: true } });
        expect(wrapper.find('.rc-checkbox-input').at(1).props().checked).toBe(false);
    });
});