'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _checkbox = require('../checkbox/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author [SunLei](http://git.4paradigm.com/u/sunlei)
 * 
 * 复选框组，可以横排或者竖排展示一组 Checkbox
 */
var CheckboxGroup = function (_React$Component) {
    _inherits(CheckboxGroup, _React$Component);

    function CheckboxGroup(props) {
        _classCallCheck(this, CheckboxGroup);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            selections: _this.props.defaultValue
        };
        return _this;
    }

    CheckboxGroup.prototype.isChecked = function isChecked(optionValue) {
        var value = this.props.value;

        if (value) {
            return value.indexOf(optionValue) !== -1;
        }
        return this.state.selections.indexOf(optionValue) !== -1;
    };

    CheckboxGroup.prototype.handleChange = function handleChange(checked, optionValue) {
        var _props$value = this.props.value,
            value = _props$value === undefined ? this.state.selections : _props$value;

        var nextSelections = [];
        if (checked) {
            nextSelections = [optionValue].concat(value);
        } else {
            nextSelections = value.filter(function (i) {
                return i !== optionValue;
            });
        }
        this.props.onChange(nextSelections);
        if (!this.props.value) {
            this.setState({
                selections: nextSelections
            });
        }
    };

    CheckboxGroup.prototype.render = function render() {
        var _this2 = this;

        var _props = this.props,
            name = _props.name,
            layout = _props.layout,
            className = _props.className,
            checkboxClassName = _props.checkboxClassName;

        return _react2.default.createElement(
            'div',
            { className: className + ' rc-checkbox-group-layout-' + layout },
            this.props.options.map(function (o) {
                return _react2.default.createElement(
                    _checkbox2.default,
                    {
                        key: o.value,
                        name: name,
                        className: checkboxClassName,
                        checked: _this2.isChecked(o.value),
                        onChange: function onChange(e) {
                            return _this2.handleChange(e.target.checked, o.value);
                        }
                    },
                    o.text
                );
            })
        );
    };

    return CheckboxGroup;
}(_react2.default.Component);

exports.default = CheckboxGroup;


CheckboxGroup.propTypes = {
    /**
     * 透传给所有 Checkbox 对应的 input 的 name 属性
     */
    name: _propTypes2.default.string,

    /**
     * root css class
     */
    className: _propTypes2.default.string,

    /**
     * 透传给每一个 Checkbox 组件的 root css class
     */
    checkboxClassName: _propTypes2.default.string,

    /**
     * 布局，水平排列: v，垂直排列：h
     */
    layout: _propTypes2.default.oneOf(['h', 'v']),

    /**
     * 选项列表
     */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        text: _propTypes2.default.string
    })),

    /* eslint-disable react/require-default-props */
    /**
     * 选中项的 value 列表，需要与 onChnage 配合使用
     */
    value: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

    /**
     * 默认选中项的 value 列表
     */
    defaultValue: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

    /**
     * 选中项发生变化时触发
     */
    onChange: _propTypes2.default.func
};

CheckboxGroup.defaultProps = {
    name: '',
    className: '',
    checkboxClassName: '',
    layout: 'h',
    options: [],
    defaultValue: [],
    onChange: function onChange(selections) {
        return selections;
    }
};