'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _radio = require('../radio/radio');

var _radio2 = _interopRequireDefault(_radio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var prefixCls = 'rc-radio-group';

/**
 * @author sunyue
 *
 * 单选框集合，本组件基于 [rc-checkbox](http://react-component.github.io/checkbox/)
 */

var RadioGroup = function (_React$Component) {
    _inherits(RadioGroup, _React$Component);

    function RadioGroup() {
        _classCallCheck(this, RadioGroup);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args)));

        _this.state = { value: _this.props.value ? _this.props.value : _this.props.defaultValue };
        return _this;
    }

    RadioGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var value = nextProps.value;

        if ('value' in nextProps) {
            this.setState({
                value: value
            });
        }
    };

    RadioGroup.prototype.onRadioChange = function onRadioChange(ev) {
        if (!('value' in this.props)) {
            this.setState({
                value: ev.target.value
            });
        }
        this.props.onChange(ev.target.value);
    };

    RadioGroup.prototype.render = function render() {
        var _this2 = this,
            _classNames;

        var _props = this.props,
            options = _props.options,
            disabled = _props.disabled,
            layout = _props.layout,
            onChange = _props.onChange,
            others = _objectWithoutProperties(_props, ['options', 'disabled', 'layout', 'onChange']);

        var radioList = [];

        options.forEach(function (radio, index) {
            if (radio) {
                var keyProps = {};
                if (!('key' in radio) && typeof radio.value === 'string') {
                    keyProps.key = radio.value;
                }

                var radioItem = _react2.default.createElement(
                    _radio2.default,
                    _extends({
                        key: index,
                        onChange: function onChange(e) {
                            return _this2.onRadioChange(e);
                        },
                        checked: _this2.state.value === radio.value,
                        disabled: radio.disabled,
                        value: radio.value
                    }, keyProps),
                    radio.text
                );
                radioList.push(radioItem);
            }
        });

        var classString = (0, _classnames2.default)((_classNames = {}, _classNames[prefixCls] = true, _classNames[prefixCls + '-' + layout] = layout, _classNames));

        return _react2.default.createElement(
            'div',
            _extends({ className: classString }, others),
            radioList
        );
    };

    return RadioGroup;
}(_react2.default.Component);

RadioGroup.propTypes = {
    /**
     * 传入 group 的 options 配置
     */
    options: _propTypes2.default.array,
    /**
     * group 排列方式
     */
    layout: _propTypes2.default.oneOf(['h', 'v']),
    /**
     * group 回调函数
     */
    onChange: _propTypes2.default.func,
    /**
     * group 是否禁用
     */
    disabled: _propTypes2.default.bool,
    /**
     * group 选中 Radio值
     */
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
    defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

RadioGroup.defaultProps = {
    options: [],
    disabled: false,
    layout: 'h',
    onChange: function onChange() {},

    defaultValue: 1
};

exports.default = RadioGroup;