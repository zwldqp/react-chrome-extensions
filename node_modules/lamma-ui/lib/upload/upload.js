'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcUpload = require('rc-upload');

var _rcUpload2 = _interopRequireDefault(_rcUpload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var prefixCls = 'rc-upload';
/**
 * @author sunyue
 *
 * 基于[rc-upload](http://react-component.github.io/upload/examples/)
 */

var Upload = function (_React$Component) {
    _inherits(Upload, _React$Component);

    function Upload(props) {
        _classCallCheck(this, Upload);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            dragState: 'drop',
            fileList: []
        };
        return _this;
    }

    Upload.prototype.onStart = function onStart(file) {
        var targetItem = file;
        var nextFileList = this.state.fileList.concat();
        targetItem.status = 'uploading';
        targetItem.percent = 0;
        nextFileList.push(targetItem);
        this.onChange({
            file: targetItem,
            fileList: nextFileList
        });
        this.props.onStart(file);
    };

    Upload.prototype.onChange = function onChange(info) {
        this.setState({
            fileList: info.fileList
        });
        this.props.onChange(info);
    };

    Upload.prototype.onSuccess = function onSuccess(file) {
        this.props.onSuccess(file);
    };

    Upload.prototype.onProgress = function onProgress(e, file) {
        var targetItem = file;
        if (!targetItem) return;
        targetItem.percent = e.percent;
        this.onChange({
            event: e,
            file: targetItem,
            fileList: this.state.fileList
        });
        this.props.onProgress(e, file);
    };

    Upload.prototype.onError = function onError(err) {
        this.props.onError(err);
    };

    Upload.prototype.beforeUpload = function beforeUpload(file) {
        return this.props.beforeUpload(file);
    };

    Upload.prototype.render = function render() {
        var _props = this.props,
            children = _props.children,
            type = _props.type;

        var props = Object.assign({}, this.props, {
            onStart: this.onStart.bind(this),
            onError: this.onError.bind(this),
            onProgress: this.onProgress.bind(this),
            onSuccess: this.onSuccess.bind(this),
            beforeUpload: this.beforeUpload.bind(this)
        });

        if (type === 'select') {
            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    _rcUpload2.default,
                    _extends({}, props, { ref: this.props.inputRef }),
                    _react2.default.createElement(
                        'div',
                        null,
                        children
                    )
                )
            );
        }
        if (type === 'drag') {
            var dragUploadingClass = this.state.fileList.some(function (file) {
                return file.status === 'uploading';
            }) ? prefixCls + '-drag-uploading' : '';
            var draggingClass = this.state.dragState === 'dragover' ? prefixCls + '-drag-hover' : '';
            return _react2.default.createElement(
                'span',
                { className: this.props.className },
                _react2.default.createElement(
                    'div',
                    {
                        className: prefixCls + ' ' + prefixCls + '-drag ' + dragUploadingClass + ' ' + draggingClass
                    },
                    _react2.default.createElement(
                        _rcUpload2.default,
                        _extends({}, props, { ref: this.props.inputRef }),
                        _react2.default.createElement(
                            'div',
                            { className: prefixCls + '-drag-container' },
                            this.props.children
                        )
                    )
                )
            );
        }
        return null;
    };

    return Upload;
}(_react2.default.Component);

Upload.propTypes = {
    /**
     * 请在这里填写组件当前属性的描述信息
     */
    children: _propTypes2.default.object,
    /**
     * 上传类型可选
     */
    type: _propTypes2.default.oneOf(['select', 'drag']),
    className: _propTypes2.default.string,
    onStart: _propTypes2.default.func,
    onSuccess: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    onProgress: _propTypes2.default.func,
    beforeUpload: _propTypes2.default.func,
    onChange: _propTypes2.default.func,
    inputRef: _propTypes2.default.func
};

Upload.defaultProps = {
    children: {},
    type: 'select',
    className: '',
    onStart: function onStart() {},
    onSuccess: function onSuccess() {},
    onError: function onError() {},
    onProgress: function onProgress() {},
    beforeUpload: function beforeUpload() {},
    onChange: function onChange() {},
    inputRef: function inputRef() {}
};

exports.default = Upload;