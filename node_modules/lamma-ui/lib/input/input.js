'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author [sundi]
 * input输入框组件
 */

var Input = function (_PureComponent) {
    _inherits(Input, _PureComponent);

    function Input() {
        _classCallCheck(this, Input);

        return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
    }

    Input.prototype.render = function render() {
        var _inputClass,
            _classNames,
            _classNames2,
            _this2 = this;

        var prefix = 'rc-input';

        var _props = this.props,
            className = _props.className,
            errorMsg = _props.errorMsg,
            inputClassName = _props.inputClassName,
            others = _objectWithoutProperties(_props, ['className', 'errorMsg', 'inputClassName']);

        var inputClass = (_inputClass = {}, _inputClass[prefix + '-wrap'] = true, _inputClass);
        if (className) {
            inputClass[className] = true;
        }

        var hasErrorMsg = errorMsg && typeof errorMsg === 'string';
        var inputErrorClassName = (0, _classnames2.default)((_classNames = {}, _classNames[prefix] = true, _classNames[inputClassName] = true, _classNames[prefix + '-error'] = hasErrorMsg, _classNames));

        var errorMsgClassName = (0, _classnames2.default)((_classNames2 = {}, _classNames2[prefix + '-error-text'] = true, _classNames2[prefix + '-error-hide'] = !hasErrorMsg, _classNames2));

        return _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)(inputClass) },
            _react2.default.createElement('input', _extends({}, others, {
                ref: function ref(node) {
                    _this2.input = node;
                },
                className: inputErrorClassName
            })),
            _react2.default.createElement(
                'span',
                { className: errorMsgClassName },
                errorMsg
            )
        );
    };

    return Input;
}(_react.PureComponent);

exports.default = Input;


Input.propTypes = {
    /**
     * className root className
     * 默认width: 100%; height: 32px;
     */
    className: _propTypes2.default.string,
    /**
     * input className，用于覆写input的样式，比如focus之后是否有边框及边框的颜色等
     */
    inputClassName: _propTypes2.default.string,
    /**
     * 输入框下方 显示错误信息
     */
    errorMsg: _propTypes2.default.string
};

Input.defaultProps = {
    className: '',
    inputClassName: '',
    errorMsg: ''
};