import axios, { AxiosRequestConfig, AxiosPromise, AxiosResponse, AxiosError, AxiosInterceptorManager } from 'axios';
export interface DAOInterceptorManager<V> extends AxiosInterceptorManager<V> {
}
export interface DAORequestConfig extends AxiosRequestConfig {
    loading?: boolean;
    takeLatest?: boolean;
    preventRepeated?: boolean;
    preventNotification?: boolean;
}
export interface DAOInitialSettings {
    [methodName: string]: string | DAORequestConfig;
}
export interface DAOInstance {
    [methodName: string]: DAOMethod;
}
export interface DAOMethod {
    (config?: DAORequestConfig): AxiosPromise;
}
export interface DAOResponse extends AxiosResponse {
    config: DAORequestConfig;
}
export interface DAOError extends AxiosError {
    config: DAORequestConfig;
}
export { axios };
declare const dao: {
    interceptors: {
        request: DAOInterceptorManager<DAORequestConfig>;
        response: DAOInterceptorManager<DAORequestConfig>;
    };
    handlers: {
        showLoading: () => void;
        hideLoading: () => void;
        displayNotification(error: AxiosError): void;
        requestShouldLoading(config: DAORequestConfig): boolean;
    };
    parseURL(urlPattern: string, params?: {
        [key: string]: any;
    }, data?: {
        [key: string]: any;
    }): string;
    create(settings: DAOInitialSettings): DAOInstance;
};
export default dao;
